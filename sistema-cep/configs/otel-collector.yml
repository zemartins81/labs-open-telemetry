# =============================================================================
# OpenTelemetry Collector Configuration
# Sistema de Temperatura por CEP
# =============================================================================

# Receivers - Como o collector recebe dados de telemetria
receivers:
  # OTLP Receiver - Protocol padrão do OpenTelemetry
  otlp:
    protocols:
      # gRPC endpoint para alta performance
      grpc:
        endpoint: 0.0.0.0:4317
        # Configurações de transporte
        transport: tcp
        # Configurações de TLS (desabilitado para desenvolvimento)
        tls:
          insecure: true
        # Tamanho máximo da mensagem (4MB)
        max_recv_msg_size: 4194304
        # Timeout para leitura
        read_buffer_size: 524288
        write_buffer_size: 524288

      # HTTP endpoint para compatibilidade
      http:
        endpoint: 0.0.0.0:4318
        # CORS configuration para desenvolvimento
        cors:
          allowed_origins:
            - http://localhost:3000
            - http://localhost:8080
            - http://localhost:8081
          allowed_headers:
            - Accept
            - Accept-Language
            - Content-Type
            - Content-Language
          max_age: 7200

  # Prometheus receiver para métricas (opcional)
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 30s
          static_configs:
            - targets: ['localhost:8888']
        - job_name: 'servico-a'
          scrape_interval: 30s
          static_configs:
            - targets: ['servico-a:8080']
        - job_name: 'servico-b'
          scrape_interval: 30s
          static_configs:
            - targets: ['servico-b:8081']

  # Health check receiver
  hostmetrics:
    collection_interval: 30s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      network:
      disk:

# Processors - Como processar os dados antes de exportar
processors:
  # Batch processor - Agrupa dados para eficiência
  batch:
    # Timeout para enviar o batch
    timeout: 1s
    # Tamanho máximo do batch
    send_batch_size: 1024
    # Tamanho máximo do batch para traces
    send_batch_max_size: 2048

  # Memory limiter - Previne uso excessivo de memória
  memory_limiter:
    # Limite de memória (512MB)
    limit_mib: 512
    # Limite para iniciar spike arrest (400MB)
    spike_limit_mib: 400
    # Intervalo de verificação
    check_interval: 5s

  # Resource processor - Adiciona atributos aos recursos
  resource:
    attributes:
      - key: service.environment
        value: development
        action: upsert
      - key: service.instance.id
        from_attribute: host.name
        action: upsert
      - key: deployment.environment
        value: docker-compose
        action: upsert

  # Attributes processor - Manipula atributos de spans
  attributes:
    actions:
      # Remove atributos sensíveis
      - key: http.request.header.authorization
        action: delete
      - key: http.request.header.cookie
        action: delete
      # Adiciona atributos customizados
      - key: sistema.cep.version
        value: "1.0.0"
        action: upsert

  # Span processor - Processa spans individualmente
  span:
    name:
      # Renomeia spans com padrões específicos
      to_attributes:
        rules:
          - pattern: ^HTTP (?P<method>\w+) (?P<path>.*)$
            name_template: "HTTP %{method}"

  # Filter processor - Filtra dados desnecessários
  filter:
    traces:
      span:
        # Remove spans de health check
        - 'attributes["http.route"] == "/health"'
        - 'attributes["http.route"] == "/metrics"'

  # Probabilistic sampler - Sampling de traces
  probabilistic_sampler:
    # 100% em desenvolvimento, ajustar para produção (ex: 0.1 = 10%)
    sampling_percentage: 100

# Exporters - Para onde enviar os dados processados
exporters:
  # Zipkin exporter - Para distributed tracing
  zipkin:
    endpoint: http://zipkin:9411/api/v2/spans
    # Formato do payload
    format: json
    # Timeout para requisições
    timeout: 30s
    # Configurações de retry
    retry_on_failure:
      enabled: true
      initial_interval: 1s
      max_interval: 30s
      max_elapsed_time: 300s
    # Queue settings
    sending_queue:
      enabled: true
      num_consumers: 10
      queue_size: 5000

  # Prometheus exporter - Para métricas
  prometheus:
    endpoint: "0.0.0.0:8889"
    # Namespace para métricas
    namespace: sistema_cep
    # Adicionar labels de recurso como métricas
    const_labels:
      environment: development
      version: "1.0.0"
    # Configurações de coleta
    metric_expiration: 180m
    resource_to_telemetry_conversion:
      enabled: true

  # Logging exporter - Para debug (remover em produção)
  logging:
    loglevel: info
    sampling_initial: 5
    sampling_thereafter: 200

  # OTLP exporter - Para outros collectors ou backends
  otlp:
    endpoint: http://jaeger:14250
    tls:
      insecure: true
    # Desabilitado por padrão, habilitar se usar Jaeger
    # timeout: 30s

  # File exporter - Para backup local (opcional)
  file:
    path: /tmp/otel-traces.json
    # Rotação de arquivos
    rotation:
      max_megabytes: 100
      max_days: 7
      max_backups: 3

# Extensions - Funcionalidades adicionais
extensions:
  # Health check extension
  health_check:
    endpoint: 0.0.0.0:13133
    path: /health

  # pprof extension para profiling
  pprof:
    endpoint: 0.0.0.0:1777

  # zpages extension para debug
  zpages:
    endpoint: 0.0.0.0:55679

  # Memory ballast para estabilidade de GC
  memory_ballast:
    size_mib: 128

# Service - Pipeline de processamento
service:
  # Extensions ativas
  extensions: [health_check, pprof, zpages, memory_ballast]

  # Pipelines de dados
  pipelines:
    # Pipeline de traces
    traces:
      receivers: [otlp]
      processors: [
        memory_limiter,
        resource,
        attributes,
        span,
        filter,
        probabilistic_sampler,
        batch
      ]
      exporters: [zipkin, logging]

    # Pipeline de métricas
    metrics:
      receivers: [otlp, prometheus, hostmetrics]
      processors: [
        memory_limiter,
        resource,
        batch
      ]
      exporters: [prometheus, logging]

    # Pipeline de logs
    logs:
      receivers: [otlp]
      processors: [
        memory_limiter,
        resource,
        batch
      ]
      exporters: [logging]

  # Configurações de telemetria do próprio collector
  telemetry:
    logs:
      level: "info"
      development: false
      sampling:
        enabled: true
        initial: 5
        thereafter: 200
    metrics:
      # Endpoint para métricas do collector
      address: 0.0.0.0:8888
      level: detailed
    traces:
      # Desabilitar traces internos do collector
      processors: []
