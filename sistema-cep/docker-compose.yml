version: '3.8'

services:
  # Serviço A - Input e Validação de CEP (Porta 8080)
  servico-a:
    build:
      context: ./servico-a
      dockerfile: Dockerfile
    container_name: sistema-cep-servico-a
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - SERVICO_B_URL=http://servico-b:8081
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=servico-a
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_RESOURCE_ATTRIBUTES=service.name=servico-a,service.version=1.0.0
    depends_on:
      - servico-b
      - otel-collector
    networks:
      - sistema-cep-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Serviço B - Orquestração de APIs (Porta 8081)
  servico-b:
    build:
      context: ./servico-b
      dockerfile: Dockerfile
    container_name: sistema-cep-servico-b
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
      - VIACEP_API_URL=https://viacep.com.br/ws
      - WEATHER_API_URL=http://api.weatherapi.com/v1/current.json
      - WEATHER_API_KEY=${WEATHER_API_KEY}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=servico-b
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_RESOURCE_ATTRIBUTES=service.name=servico-b,service.version=1.0.0
    depends_on:
      - otel-collector
    networks:
      - sistema-cep-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.89.0
    container_name: sistema-cep-otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./configs/otel-collector.yml:/etc/otel-collector-config.yml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter metrics
    depends_on:
      - zipkin
    networks:
      - sistema-cep-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8888/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Zipkin - Interface de Tracing
  zipkin:
    image: openzipkin/zipkin:2.24
    container_name: sistema-cep-zipkin
    ports:
      - "9411:9411"
    environment:
      - STORAGE_TYPE=mem
      - JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - zipkin-data:/zipkin/data
    networks:
      - sistema-cep-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9411/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Prometheus (Opcional - para métricas)
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: sistema-cep-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - sistema-cep-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana (Opcional - para visualização de métricas)
  grafana:
    image: grafana/grafana:10.2.0
    container_name: sistema-cep-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - sistema-cep-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Redis (Opcional - para cache)
  redis:
    image: redis:7.2-alpine
    container_name: sistema-cep-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - sistema-cep-network
    restart: unless-stopped
    profiles:
      - cache

volumes:
  grafana-data:
  redis-data:
  zipkin-data:

networks:
  sistema-cep-network:
    driver: bridge
